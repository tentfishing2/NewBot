import os
import sys
import asyncio
import signal
import time
import platform
from datetime import datetime, timedelta
from typing import Set, Dict, Optional
import aiosqlite
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    ApplicationBuilder,
)
from telegram.error import TelegramError, NetworkError, TimedOut, BadRequest
from telegram.request import HTTPXRequest
import pytz
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
from functools import wraps
from loguru import logger
import subprocess
import re
import httpx
import psutil

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add("bot.log", rotation="1 MB", retention=10, level="INFO", encoding="utf-8", backtrace=True, diagnose=True, compression="zip")
logger.add(sys.stdout, level="INFO", format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_ATTEMPTS = 3
ENTER_SECRET_CODE = 1
DB_TIMEOUT = 10
RESTART_DELAY = 60
MAX_VIOLATIONS = 3
MIN_MESSAGE_LENGTH = 10
PING_INTERVAL = int(os.getenv("PING_INTERVAL", 60))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
MIN_PING_INTERVAL = 60
MAX_PING_INTERVAL = 1800
MAX_RESTART_ATTEMPTS = 3
SYNC_INTERVAL = 30 * 24 * 3600  # 30 –¥–Ω–µ–π
CLEAN_VIOLATIONS_INTERVAL = 50 * 24 * 3600
REQUEST_TIMEOUT = 120
ENABLE_CPU_TRACKING = os.getenv("ENABLE_CPU_TRACKING", "False").lower() == "true"
CPU_THRESHOLD_DEFAULT = 80.0
RAM_THRESHOLD_DEFAULT = 90.0
CPU_THRESHOLD_MIN = 60.0
RAM_THRESHOLD_MIN = 70.0
CPU_THRESHOLD_MAX = 90.0
RAM_THRESHOLD_MAX = 95.0
RESOURCE_CHECK_INTERVAL = 300

# –õ–∏–º–∏—Ç—ã –¥–ª—è rate limiting
RATE_LIMITS = {
    "default": 5,
    "start": 10,
    "rules": 5,
    "help": 5,
    "stats": 30,
    "restart": 60,
    "status": 30,
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_IDS = set(map(int, filter(None, os.getenv("ADMIN_IDS", "").split(","))))
    SECRET_CODE = os.getenv("SECRET_CODE")
    GROUP_ID = int(os.getenv("GROUP_ID"))
    CHANNEL_URL = os.getenv("CHANNEL_URL")
    TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", "UTC"))
    WELCOME_MESSAGE_TIMEOUT = int(os.getenv("WELCOME_MESSAGE_TIMEOUT", 300))
    VIOLATION_TIMEOUT_HOURS = int(os.getenv("VIOLATION_TIMEOUT_HOURS", 24))
    NIGHT_START = int(os.getenv("NIGHT_AUTO_REPLY_START", 22))
    NIGHT_END = int(os.getenv("NIGHT_AUTO_REPLY_END", 6))
    OWNER_ID = int(os.getenv("OWNER_ID"))
    PING_URL = os.getenv("PING_URL", "https://uptime.betterstack.com/api/v1/heartbeat/KamjLgY2dh8ems1aezkNSKmu")
except (ValueError, TypeError) as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
    sys.exit(1)

if not all([BOT_TOKEN, SECRET_CODE, CHANNEL_URL]):
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

# –°–æ–æ–±—â–µ–Ω–∏—è
WELCOME_TEXT = (
    "üåÑ‚ú® **–ü—Ä–∏–≤–µ—Ç, {name}!** üåü\n"
    "üèïÔ∏èüå≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **¬´–ü–∞–ª–∞—Ç–∫–∏-–î–í¬ª** ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Ç–≤–æ–∏ –ª—É—á—à–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!\n\n"
    "üëâ **–ß—Ç–æ —É –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:**\n"
    "‚úÖ **–ü–∞–ª–∞—Ç–∫–∏** ‚Äî –ª–µ—Ç–Ω–∏–µ, –∑–∏–º–Ω–∏–µ, —Å–µ–º–µ–π–Ω—ã–µ;\n"
    "‚úÖ **–§–æ–Ω–∞—Ä–∏** ‚Äî –º–æ—â–Ω—ã–µ –∏ –ø—ã–ª–µ–≤–ª–∞–≥–æ–∑–∞—â–∏—â—ë–Ω–Ω—ã–µ;\n"
    "‚úÖ **–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–∏** ‚Äî –∫–µ—Ä–æ—Å–∏–Ω–æ–≤—ã–µ, –¥—Ä–æ–≤—è–Ω—ã–µ –ø–µ—á–∫–∏;\n"
    "‚úÖ **–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ** ‚Äî —Å–ø–∞–ª—å–Ω–∏–∫–∏, –∫–æ–≤—Ä–∏–∫–∏, —Ç–µ—Ä–º–æ—Å—ã, —Å–ø–µ—Ü–æ–¥–µ–∂–¥–∞, —Ä—é–∫–∑–∞–∫–∏;\n"
    "‚úÖ **–ö–µ–º–ø–∏–Ω–≥–æ–≤–∞—è –º–µ–±–µ–ª—å** ‚Äî —Å—Ç—É–ª—å—è, —Å—Ç–æ–ª—ã, —à–µ–∑–ª–æ–Ω–≥–∏, —Ç–µ–Ω—Ç—ã;\n"
    "‚úÖ **–†—ã–±–∞—Ü–∫–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏** ‚Äî –≤—Å—ë –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏;\n"
    "‚úÖ **–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ** ‚Äî —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏, –Ω–∞–±–æ—Ä—ã –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –Ω—É–∂–Ω—ã—Ö –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π!\n\n"
    "üìú **–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å <a href='/rules'>–ø—Ä–∞–≤–∏–ª–∞–º–∏</a> –∏ –≤–ª–∏–≤–∞–π—Å—è –≤ –Ω–∞—à–µ –¥—Ä—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!**\n\n"
    "üí¨ **–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞–π–¥—ë—à—å —á–µ–≥–æ-—Ç–æ, –≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–π, –ø–∏—à–∏ –∏–ª–∏ –∑–≤–æ–Ω–∏ ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º!**"
)

RULES_TEXT = (
    "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ \"–ü–∞–ª–∞—Ç–∫–∏-–î–í\"</b>\n\n"
    "üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
    "1. –ú–∞—Ç, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –∞–≥—Ä–µ—Å—Å–∏—è;\n"
    "2. –†–µ–∫–ª–∞–º–∞ –∏ —Å–ø–∞–º –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è;\n"
    "3. –§–ª—É–¥, –æ—Ñ—Ñ—Ç–æ–ø, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è;\n"
    "4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è;\n"
    "5. –†–∞–∑–∂–∏–≥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏;\n"
    "6. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π;\n"
    "7. –õ—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§.\n\n"
    "‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ:</b>\n"
    "1. –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, –ø–æ—Ö–æ–¥–æ–≤, –∫–µ–º–ø–∏–Ω–≥–∞;\n"
    "2. –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –ª–∞–π—Ñ—Ö–∞–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî <b>—Å–±—Ä–∞—Å—ã–≤–∞–π –∞–¥–º–∏–Ω—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>;\n"
    "3. –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∏–∑ –ø–æ—Ö–æ–¥–æ–≤ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π ‚Äî <b>—Å–±—Ä–∞—Å—ã–≤–∞–π –∞–¥–º–∏–Ω—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>;\n"
    "4. –î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º ‚Äî <b>—Å–±—Ä–∞—Å—ã–≤–∞–π –∞–¥–º–∏–Ω—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>.\n\n"
    "‚ùó <b>–í–∞–∂–Ω–æ:</b>\n"
    "- –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–µ–¥—ë—Ç –∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º, —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.\n\n"
    "<b>–°–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É! üåø</b>"
)

HELP_TEXT = (
    "üåü <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
    "‚Ä¢ /start ‚Äî –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞;\n"
    "‚Ä¢ /rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞;\n"
    "‚Ä¢ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥;\n"
    "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤);\n"
    "‚Ä¢ /status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤);\n"
    "‚Ä¢ /restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."
)

BAD_WORDS_PATTERN = re.compile(
    r"(?<!\w)"
    r"(?:–±[–ªb][—èa][—Çt—å]?|—Å[—Éy][–∫k][–∞a–∏]?|–ø[–∏i][–∑3][–¥d][–µe][—Üc—Ç]?|—Ö[—Éy][–πi–π]|[–µe—ë][–±b][–∞a][—Çt—å]?|"
    r"–ø[–∏i][–¥d][–æo][—Äp]|[–ºm][—Éy][–¥d][–∞a][–∫k]|[–¥d][–æo][–ªl][–±b][–æo—ë][–±b]|[—Öx][—Éy][—ë–µe][–≤v][–æo]|[–øp][–∏i][–∑3][–¥d][–∞a]|"
    r"[–∂j][–æo][–øp][–∞a]|[–Ωn][–∞a][—Öx][—Éy][–πi]|[–≥g][–æo][–≤v][–Ωn][–æo]|[—à][–ªl][—éy][—Öx][–∞a]|[—Öx][—Éy][–µe][—Åc][–æo][—Åc]|"
    r"[–¥d][–µe][–±b][–∏i][–ªl]|[–∏i][–¥d][–∏i][–æo][—Çt]|[–∫k][–æo][–∑3][—ë–µe][–ªl]|[–ªl][–æo][—Öx]|[–ºm][—Äp][–∞a][–∑3][—å—ä]?|[—Çt][–≤v][–∞a][—Äp][—å—ä]?)"
    r"(?![a-zA-Z0-9])",
    re.IGNORECASE | re.UNICODE
)

# –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
task_queue = asyncio.Queue(maxsize=50)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à
async def init_db() -> None:
    async with aiosqlite.connect("violations.db", timeout=DB_TIMEOUT) as conn:
        await conn.execute(
            '''CREATE TABLE IF NOT EXISTS violations 
               (user_id INTEGER PRIMARY KEY, count INTEGER, last_violation TEXT)'''
        )
        await conn.commit()

async def load_violations_cache(context: ContextTypes.DEFAULT_TYPE) -> None:
    async with aiosqlite.connect("violations.db", timeout=DB_TIMEOUT) as conn:
        async with conn.execute("SELECT user_id, count, last_violation FROM violations") as cursor:
            async for user_id, count, last_violation in cursor:
                context.bot_data.setdefault('violations_cache', {})[user_id] = {
                    "count": count,
                    "last_violation": datetime.fromisoformat(last_violation) if last_violation else None
                }

async def sync_violations_cache(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        async with aiosqlite.connect("violations.db", timeout=DB_TIMEOUT) as conn:
            async with conn.cursor() as cursor:
                for user_id, data in context.bot_data.get('violations_cache', {}).items():
                    await cursor.execute(
                        "INSERT OR REPLACE INTO violations (user_id, count, last_violation) VALUES (?, ?, ?)",
                        (user_id, data["count"], data["last_violation"].isoformat() if data["last_violation"] else None)
                    )
                await conn.commit()
        logger.debug("–ö—ç—à –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")

async def clean_violations_cache(context: ContextTypes.DEFAULT_TYPE) -> None:
    now = get_current_time()
    cache = context.bot_data.get('violations_cache', {})
    removed = 0
    for user_id in list(cache.keys()):
        if now - cache[user_id]["last_violation"] > timedelta(hours=VIOLATION_TIMEOUT_HOURS):
            del cache[user_id]
            removed += 1
    if removed > 0:
        logger.info(f"–ö—ç—à –Ω–∞—Ä—É—à–µ–Ω–∏–π –æ—á–∏—â–µ–Ω, —É–¥–∞–ª–µ–Ω–æ {removed} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")

async def get_violations(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> Dict[str, any]:
    return context.bot_data.get('violations_cache', {}).get(user_id, {"count": 0, "last_violation": None})

async def update_violations(user_id: int, count: int, last_violation: datetime, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.bot_data.setdefault('violations_cache', {})[user_id] = {
        "count": count,
        "last_violation": last_violation
    }

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_current_time() -> datetime:
    return datetime.now(TIMEZONE)

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def is_night_time() -> bool:
    current_hour = get_current_time().hour
    return NIGHT_START <= current_hour or current_hour < NIGHT_END

def rate_limit(command_name: str = "default"):
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            current_time = time.monotonic()
            limit = RATE_LIMITS.get(command_name, RATE_LIMITS["default"])
            last_command = context.bot_data.get(f"last_command_{user_id}_{command_name}", 0)
            if current_time - last_command < limit:
                await update.message.reply_text("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏.")
                return
            context.bot_data[f"last_command_{user_id}_{command_name}"] = current_time
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator

async def notify_admins(context: ContextTypes.DEFAULT_TYPE, message: str) -> None:
    for admin_id in ADMIN_IDS:
        await task_queue.put(
            lambda: context.bot.send_message(chat_id=admin_id, text=message, parse_mode="HTML")
        )

def create_subscribe_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üëâ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –ö–ê–ù–ê–õ üëà", url=CHANNEL_URL)]])

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –±–æ—Ç–∞
async def get_bot_rights(context: ContextTypes.DEFAULT_TYPE) -> dict:
    if 'bot_rights' not in context.bot_data:
        context.bot_data['bot_rights'] = await context.bot.get_chat_member(chat_id=GROUP_ID, user_id=context.bot.id)
    return context.bot_data['bot_rights']

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
def check_resources(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        cpu_usage = psutil.cpu_percent(interval=1)
        ram_usage = psutil.virtual_memory().percent
        cpu_threshold = context.bot_data.get('cpu_threshold', CPU_THRESHOLD_DEFAULT)
        ram_threshold = context.bot_data.get('ram_threshold', RAM_THRESHOLD_DEFAULT)
        return cpu_usage < cpu_threshold and ram_usage < ram_threshold
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        return True

async def adjust_resource_thresholds(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        cpu_usage = psutil.cpu_percent(interval=1)
        ram_usage = psutil.virtual_memory().percent
        current_cpu_threshold = context.bot_data.get('cpu_threshold', CPU_THRESHOLD_DEFAULT)
        current_ram_threshold = context.bot_data.get('ram_threshold', RAM_THRESHOLD_DEFAULT)

        if cpu_usage > current_cpu_threshold * 0.9:
            new_cpu_threshold = min(current_cpu_threshold + 5.0, CPU_THRESHOLD_MAX)
        elif cpu_usage < current_cpu_threshold * 0.6:
            new_cpu_threshold = max(current_cpu_threshold - 5.0, CPU_THRESHOLD_MIN)
        else:
            new_cpu_threshold = current_cpu_threshold

        if ram_usage > current_ram_threshold * 0.9:
            new_ram_threshold = min(current_ram_threshold + 5.0, RAM_THRESHOLD_MAX)
        elif ram_usage < current_ram_threshold * 0.6:
            new_ram_threshold = max(current_ram_threshold - 5.0, RAM_THRESHOLD_MIN)
        else:
            new_ram_threshold = current_ram_threshold

        if new_cpu_threshold != current_cpu_threshold or new_ram_threshold != current_ram_threshold:
            context.bot_data['cpu_threshold'] = new_cpu_threshold
            context.bot_data['ram_threshold'] = new_ram_threshold
            logger.debug(f"–ü–æ—Ä–æ–≥–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: CPU={new_cpu_threshold}%, RAM={new_ram_threshold}%")
            await notify_admins(context, f"üîß –ü–æ—Ä–æ–≥–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: CPU={new_cpu_threshold}%, RAM={new_ram_threshold}%")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–µ –ø–æ—Ä–æ–≥–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ CPU
def track_cpu_time(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        if not ENABLE_CPU_TRACKING:
            return await func(*args, **kwargs)
        start_time = time.process_time()
        result = await func(*args, **kwargs)
        cpu_time = time.process_time() - start_time
        context = args[1] if len(args) > 1 else kwargs.get('context')
        if context:
            context.bot_data['cpu_used'] = context.bot_data.get('cpu_used', 0.0) + cpu_time
        return result
    return wrapper

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
async def task_worker(context: ContextTypes.DEFAULT_TYPE) -> None:
    while True:
        try:
            task = await task_queue.get()
            await task()
            task_queue.task_done()
        except (NetworkError, TimedOut) as e:
            logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {e}")
        finally:
            task_queue.task_done()

def check_duplicate_process() -> bool:
    current_pid = os.getpid()
    script_name = os.path.basename(__file__)
    for proc in psutil.process_iter(['pid', 'cmdline']):
        try:
            cmdline = proc.info['cmdline']
            if (proc.pid != current_pid and cmdline and script_name in ' '.join(cmdline)):
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, TypeError):
            continue
    return False

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –ø–∏–Ω–≥
async def activate_ping(context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.bot_data.get('ping_enabled', False):
        logger.info("–ê–∫—Ç–∏–≤–∏—Ä—É—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–∏–Ω–≥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        context.bot_data['ping_enabled'] = True
        context.job_queue.run_repeating(
            ping_uptime,
            interval=lambda ctx: max(MIN_PING_INTERVAL, min(ctx.bot_data.get('ping_interval', PING_INTERVAL), MAX_PING_INTERVAL)),
            first=10,
            name="ping_uptime"
        )

async def restart_self(context: Optional[ContextTypes.DEFAULT_TYPE] = None) -> None:
    restart_attempts = context.bot_data.get('restart_attempts', 0) if context else 0
    restart_attempts += 1

    if restart_attempts > MAX_RESTART_ATTEMPTS:
        logger.critical(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({MAX_RESTART_ATTEMPTS}). –ê–∫—Ç–∏–≤–∏—Ä—É—é –ø–∏–Ω–≥.")
        if context:
            await notify_admins(context, f"üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({MAX_RESTART_ATTEMPTS}). –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–∏–Ω–≥.")
            await activate_ping(context)
        return

    if context:
        context.bot_data['restart_attempts'] = restart_attempts

    if check_duplicate_process():
        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–≤–µ—Ä—à–∞—é —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä")
        sys.exit(0)

    try:
        logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_attempts}/{MAX_RESTART_ATTEMPTS})...")
        cmd = [sys.executable, os.path.abspath(__file__)]
        subprocess.Popen(cmd, env=os.environ.copy(), shell=(platform.system() == "Windows"))
        await asyncio.sleep(2)
        sys.exit(0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        await asyncio.sleep(RESTART_DELAY * (2 ** min(restart_attempts, 5)))
        await restart_self(context)

@retry(
    stop=stop_after_attempt(10),
    wait=wait_exponential(multiplier=1, min=2, max=60),
    retry=retry_if_exception_type(Exception),
    before_sleep=lambda retry_state: logger.warning(f"–ü–æ–≤—Ç–æ—Ä –ø–∏–Ω–≥–∞, –ø–æ–ø—ã—Ç–∫–∞ {retry_state.attempt_number}")
)
@track_cpu_time
async def ping_uptime(context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.bot_data.get('ping_enabled', False) or not check_resources(context):
        logger.info("–ü–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é")
        return
    async with httpx.AsyncClient(timeout=httpx.Timeout(30.0, connect=15.0)) as client:
        try:
            response = await client.get(PING_URL)
            response.raise_for_status()
            logger.info(f"–ü–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            current_interval = context.bot_data.get('ping_interval', PING_INTERVAL)
            context.bot_data['ping_interval'] = min(current_interval + 60, MAX_PING_INTERVAL)
        except httpx.HTTPStatusError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e.response.status_code}")
            raise
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∏–Ω–≥: {e}")
            current_interval = context.bot_data.get('ping_interval', PING_INTERVAL)
            context.bot_data['ping_interval'] = max(current_interval - 60, MIN_PING_INTERVAL)
            await restart_self(context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@retry(
    stop=stop_after_attempt(10),
    wait=wait_exponential(multiplier=1, min=2, max=60),
    retry=retry_if_exception_type((NetworkError, TimedOut))
)
@track_cpu_time
async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id != GROUP_ID or not update.message.new_chat_members:
        return
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:
            continue
        name = member.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëâ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø", url=CHANNEL_URL)],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data="welcome_read")]
        ])
        try:
            group_msg = await context.bot.send_message(
                chat_id=GROUP_ID,
                text=WELCOME_TEXT.format(name=name),
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=keyboard
            )
            context.job_queue.run_once(
                lambda ctx, msg_id=group_msg.message_id: ctx.bot.delete_message(chat_id=GROUP_ID, message_id=msg_id),
                WELCOME_MESSAGE_TIMEOUT,
                name=f"delete_welcome_{group_msg.message_id}"
            )
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {name} ({member.id}) –≤ –≥—Ä—É–ø–ø–µ")
        except (NetworkError, TimedOut):
            logger.warning("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
            await activate_ping(context)
            raise
        except BadRequest as e:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        except Exception as e:
            logger.critical(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

@track_cpu_time
async def welcome_read_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    try:
        await query.answer()
        await query.message.delete()
    except (NetworkError, TimedOut):
        logger.warning("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏")
        await activate_ping(context)
    except BadRequest as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")

@retry(
    stop=stop_after_attempt(10),
    wait=wait_exponential(multiplier=1, min=2, max=60),
    retry=retry_if_exception_type((NetworkError, TimedOut))
)
@track_cpu_time
async def night_auto_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id != GROUP_ID or not update.message.text or not is_night_time() or not check_resources(context):
        return
    now = get_current_time()
    user_name = update.message.from_user.first_name
    user_id = update.message.from_user.id
    text = update.message.text[:4096] if len(update.message.text) <= 4096 else "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"
    response = (
        f"üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! üåü –≠—Ç–æ –Ω–æ—á–Ω–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ üåô‚ú®\n"
        f"üåô –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî <b>–ü–∞–ª–∞—Ç–∫–∏-–î–í</b> —É–∂–µ –æ—Ç–¥—ã—Ö–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–æ—á—å ({now.strftime('%H:%M')}). üõåüí§\n"
        "üåÑ –° –ø–µ—Ä–≤—ã–º–∏ —É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ª—É—á–∞–º–∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º! üåÖ‚ú®\n"
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üí´"
    )
    keyboard = create_subscribe_keyboard()
    await task_queue.put(
        lambda: update.message.reply_text(response, parse_mode="HTML", reply_markup=keyboard)
    )
    await task_queue.put(
        lambda: context.bot.send_message(chat_id=OWNER_ID, text=f"üîî –ù–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {text}", parse_mode="HTML")
    )

@track_cpu_time
async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id != GROUP_ID or not update.message.text or is_admin(update.effective_user.id):
        return
    text = update.message.text.lower()
    if len(text) < MIN_MESSAGE_LENGTH:
        return

    matches = list(BAD_WORDS_PATTERN.finditer(text))
    if not matches:
        return

    for match in matches:
        word = match.group(0)
        if len(word) < 3 or any(c.isdigit() for c in word) or word in ["–±–ª–∞", "—Å—É–ø", "–ø–∏–∫–∞"]:
            continue

        user_id = update.effective_user.id
        now = get_current_time()
        violation_data = await get_violations(user_id, context)
        count = 0 if not violation_data["last_violation"] or (now - violation_data["last_violation"]) > timedelta(hours=VIOLATION_TIMEOUT_HOURS) else violation_data["count"]
        count += 1
        await update_violations(user_id, count, now, context)

        try:
            bot_rights = await get_bot_rights(context)
            if bot_rights.can_delete_messages:
                await update.message.delete()
            remaining_lives = MAX_VIOLATIONS - count
            keyboard = create_subscribe_keyboard()
            await task_queue.put(
                lambda: context.bot.send_message(
                    chat_id=GROUP_ID,
                    text=f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª! –°–ª–æ–≤–æ: '{word}'. –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {remaining_lives}",
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            )
            if count >= MAX_VIOLATIONS and bot_rights.can_restrict_members:
                await context.bot.ban_chat_member(GROUP_ID, user_id)
                await task_queue.put(
                    lambda: context.bot.send_message(
                        chat_id=GROUP_ID,
                        text="üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                        reply_markup=keyboard
                    )
                )
            break
        except (NetworkError, TimedOut):
            logger.warning("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            await activate_ping(context)
        except BadRequest as e:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@rate_limit("rules")
@track_cpu_time
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = create_subscribe_keyboard()
    await update.message.reply_text(RULES_TEXT, parse_mode="HTML", reply_markup=keyboard)

@rate_limit("help")
@track_cpu_time
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = create_subscribe_keyboard()
    await update.message.reply_text(HELP_TEXT, parse_mode="HTML", reply_markup=keyboard)

@rate_limit("stats")
@track_cpu_time
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    violations = context.bot_data.get('violations_cache', {})
    if not violations:
        await update.message.reply_text("üìä –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ—Ç.")
        return
    message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n" + "\n".join(f"ID {user_id}: {data['count']} –Ω–∞—Ä—É—à–µ–Ω–∏–π" for user_id, data in violations.items())
    await update.message.reply_text(message, parse_mode="HTML")

@rate_limit("restart")
@track_cpu_time
async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    context.bot_data['restart_attempts'] = 0
    await restart_self(context)

@rate_limit("status")
@track_cpu_time
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    uptime = time.time() - context.bot_data.get('start_time', time.time())
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent
    messages_processed = context.bot_data.get('messages_processed', 0)
    restarts = context.bot_data.get('restart_attempts', 0)
    ping_status = "–ê–∫—Ç–∏–≤–µ–Ω" if context.bot_data.get('ping_enabled', False) else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
    cpu_threshold = context.bot_data.get('cpu_threshold', CPU_THRESHOLD_DEFAULT)
    ram_threshold = context.bot_data.get('ram_threshold', RAM_THRESHOLD_DEFAULT)
    status_text = (
        f"üìà <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞:</b>\n"
        f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(uptime // 3600)}—á {int((uptime % 3600) // 60)}–º\n"
        f"üì© –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_processed}\n"
        f"üíª CPU: {cpu_usage:.1f}% (–ø–æ—Ä–æ–≥: {cpu_threshold:.1f}%)\n"
        f"üß† RAM: {ram_usage:.1f}% (–ø–æ—Ä–æ–≥: {ram_threshold:.1f}%)\n"
        f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {restarts}\n"
        f"üì° –ü–∏–Ω–≥: {ping_status}"
    )
    await update.message.reply_text(status_text, parse_mode="HTML")

@rate_limit("start")
@track_cpu_time
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    activated_users = context.bot_data.setdefault('activated_users', set())
    if user_id in ADMIN_IDS or user_id in activated_users:
        await update.message.reply_text("‚úÖ –ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–∞—Å.")
        return ConversationHandler.END
    context.user_data["attempts"] = 0
    await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    return ENTER_SECRET_CODE

@track_cpu_time
async def enter_secret_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    if not user_input or len(user_input) > 50:
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return ENTER_SECRET_CODE
    context.user_data["attempts"] = context.user_data.get("attempts", 0) + 1
    global_attempts = context.bot_data.setdefault('global_attempts', {})
    global_attempts[user_id] = global_attempts.get(user_id, 0) + 1
    if user_input == SECRET_CODE:
        context.bot_data['activated_users'].add(user_id)
        await context.bot.send_message(update.effective_chat.id, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        return ConversationHandler.END
    remaining_attempts = MAX_ATTEMPTS - global_attempts[user_id]
    if remaining_attempts > 0:
        await context.bot.send_message(update.effective_chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}.")
        return ENTER_SECRET_CODE
    await context.bot.send_message(update.effective_chat.id, "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
    return ConversationHandler.END

@track_cpu_time
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

@retry(
    stop=stop_after_attempt(10),
    wait=wait_exponential(multiplier=1, min=2, max=60),
    retry=retry_if_exception_type((NetworkError, TimedOut))
)
@track_cpu_time
async def health_check(context: ContextTypes.DEFAULT_TYPE) -> None:
    if not check_resources(context):
        logger.warning("–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è")
        return
    try:
        await context.bot.get_me()
        logger.info("–ë–æ—Ç –∂–∏–≤")
    except (NetworkError, TimedOut):
        logger.error("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è")
        await activate_ping(context)
        await restart_self(context)
        raise
    except BadRequest as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram API: {e}")
        await notify_admins(context, f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        sys.exit(1)

async def error_handler(update: Optional[Update], context: ContextTypes.DEFAULT_TYPE) -> None:
    error = context.error
    logger.error(f"–û—à–∏–±–∫–∞: {error}", exc_info=error)
    if isinstance(error, (NetworkError, TimedOut)):
        logger.warning("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä—É—é –ø–∏–Ω–≥ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        await activate_ping(context)
        await restart_self(context)
    elif isinstance(error, BadRequest):
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram API: {error}")
        await notify_admins(context, f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error}. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        sys.exit(1)
    else:
        await notify_admins(context, f"üö® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def run_bot(application: Application) -> None:
    await init_db()
    application.bot_data['start_time'] = time.time()
    application.bot_data['restart_attempts'] = 0
    application.bot_data['messages_processed'] = 0
    application.bot_data['violations_cache'] = {}
    application.bot_data['ping_interval'] = PING_INTERVAL
    application.bot_data['ping_enabled'] = True  # –ü–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω —Å—Ä–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–∞
    application.bot_data['cpu_threshold'] = CPU_THRESHOLD_DEFAULT
    application.bot_data['ram_threshold'] = RAM_THRESHOLD_DEFAULT
    await load_violations_cache(application)

    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("restart", restart_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Chat(GROUP_ID), check_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Chat(GROUP_ID), night_auto_reply))
    application.add_handler(CallbackQueryHandler(welcome_read_button, pattern="^welcome_read$"))
    application.add_handler(ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={ENTER_SECRET_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_secret_code)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    ))
    application.add_error_handler(error_handler)
    application.job_queue.run_repeating(health_check, interval=21600, name="health_check")
    application.job_queue.run_repeating(sync_violations_cache, interval=SYNC_INTERVAL, name="sync_violations")
    application.job_queue.run_repeating(clean_violations_cache, interval=CLEAN_VIOLATIONS_INTERVAL, name="clean_violations")
    application.job_queue.run_repeating(adjust_resource_thresholds, interval=RESOURCE_CHECK_INTERVAL, name="adjust_thresholds")

async def post_init(application: Application) -> None:
    application.create_task(task_worker(application), name="task_worker")

async def main() -> None:
    if platform.system() == "Windows":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    request = HTTPXRequest(
        connect_timeout=REQUEST_TIMEOUT,
        read_timeout=REQUEST_TIMEOUT,
        write_timeout=REQUEST_TIMEOUT,
        pool_timeout=REQUEST_TIMEOUT
    )
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .request(request)
        .concurrent_updates(True)
        .post_init(post_init)
        .build()
    )

    while True:
        try:
            await run_bot(app)
            await app.initialize()
            await app.start()
            await app.updater.start_polling(
                allowed_updates=Update.ALL_TYPES,
                timeout=30,
                drop_pending_updates=True,
                bootstrap_retries=5,
                error_callback=lambda e: logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
            )
            logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            await notify_admins(app, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

            shutdown_event = asyncio.Event()

            def signal_handler(sig: int, frame: Optional[object]) -> None:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig} (Ctrl+C –∏–ª–∏ SIGTERM). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
                print(f"[{get_current_time().strftime('%Y-%m-%d %H:%M:%S')}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É {sig}")
                shutdown_event.set()

            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)

            await shutdown_event.wait()

            await app.updater.stop()
            await app.stop()
            await app.shutdown()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print(f"[{get_current_time().strftime('%Y-%m-%d %H:%M:%S')}] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            break
        except (NetworkError, TimedOut) as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(RESTART_DELAY)
            await restart_self(app)
        except BadRequest as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram API: {e}")
            sys.exit(1)
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(RESTART_DELAY)

if __name__ == "__main__":
    asyncio.run(main())