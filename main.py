import os
import sys
import asyncio
import signal
import time
from datetime import datetime, timedelta
from typing import Set, Dict, Optional
import aiosqlite
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    ApplicationBuilder,
)
from telegram.error import TelegramError, NetworkError, TimedOut, BadRequest
from telegram.request import HTTPXRequest
import pytz
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception
from functools import wraps
from loguru import logger
import subprocess
import re
import httpx

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add("bot.log", rotation="1 MB", level="INFO", encoding="utf-8", backtrace=True, diagnose=True)
logger.add(sys.stdout, level="INFO", format="{time} | {level} | {message}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_ATTEMPTS = 3
ENTER_SECRET_CODE = 1
DB_TIMEOUT = 10
RESTART_DELAY = 60
MAX_VIOLATIONS = 3
CPU_LIMIT_SECONDS = 90
MIN_MESSAGE_LENGTH = 10
PING_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç
PING_URL = "https://uptime.betterstack.com/api/v2/heartbeat/X7K9P2M5Q8N3B6J1"

# –õ–∏–º–∏—Ç—ã –¥–ª—è rate limiting (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
RATE_LIMITS = {
    "default": 5,    # –õ–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    "start": 10,     # –õ–∏–º–∏—Ç –¥–ª—è /start: 10 —Å–µ–∫—É–Ω–¥
    "rules": 5,      # –õ–∏–º–∏—Ç –¥–ª—è /rules: 5 —Å–µ–∫—É–Ω–¥
    "help": 5,       # –õ–∏–º–∏—Ç –¥–ª—è /help: 5 —Å–µ–∫—É–Ω–¥
    "stats": 30      # –õ–∏–º–∏—Ç –¥–ª—è /stats: 30 —Å–µ–∫—É–Ω–¥ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = set(map(int, filter(None, os.getenv("ADMIN_IDS", "").split(","))))
SECRET_CODE = os.getenv("SECRET_CODE")
GROUP_ID = int(os.getenv("GROUP_ID"))
CHANNEL_URL = os.getenv("CHANNEL_URL")
TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", "UTC"))
WELCOME_MESSAGE_TIMEOUT = int(os.getenv("WELCOME_MESSAGE_TIMEOUT", 300))
VIOLATION_TIMEOUT_HOURS = int(os.getenv("VIOLATION_TIMEOUT_HOURS", 24))
NIGHT_START = int(os.getenv("NIGHT_AUTO_REPLY_START", 22))
NIGHT_END = int(os.getenv("NIGHT_AUTO_REPLY_END", 6))
OWNER_ID = int(os.getenv("OWNER_ID"))

if not all([BOT_TOKEN, SECRET_CODE, CHANNEL_URL]):
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise SystemExit(1)

# –°–æ–æ–±—â–µ–Ω–∏—è
WELCOME_TEXT = (
    "üåÑ‚ú® **–ü—Ä–∏–≤–µ—Ç, {name}!** üåü\n"
    "üèïÔ∏èüå≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **¬´–ü–∞–ª–∞—Ç–∫–∏-–î–í¬ª** ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Ç–≤–æ–∏ –ª—É—á—à–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!\n\n"
    "üëâ **–ß—Ç–æ —É –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:**\n"
    "‚úÖ **–ü–∞–ª–∞—Ç–∫–∏** ‚Äî –ª–µ—Ç–Ω–∏–µ, –∑–∏–º–Ω–∏–µ, —Å–µ–º–µ–π–Ω—ã–µ;\n"
    "‚úÖ **–§–æ–Ω–∞—Ä–∏** ‚Äî –º–æ—â–Ω—ã–µ –∏ –ø—ã–ª–µ–≤–ª–∞–≥–æ–∑–∞—â–∏—â—ë–Ω–Ω—ã–µ;\n"
    "‚úÖ **–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–∏** ‚Äî –∫–µ—Ä–æ—Å–∏–Ω–æ–≤—ã–µ, –¥—Ä–æ–≤—è–Ω—ã–µ –ø–µ—á–∫–∏;\n"
    "‚úÖ **–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ** ‚Äî —Å–ø–∞–ª—å–Ω–∏–∫–∏, –∫–æ–≤—Ä–∏–∫–∏, —Ç–µ—Ä–º–æ—Å—ã, —Å–ø–µ—Ü–æ–¥–µ–∂–¥–∞, —Ä—é–∫–∑–∞–∫–∏;\n"
    "‚úÖ **–ö–µ–º–ø–∏–Ω–≥–æ–≤–∞—è –º–µ–±–µ–ª—å** ‚Äî —Å—Ç—É–ª—å—è, —Å—Ç–æ–ª—ã, —à–µ–∑–ª–æ–Ω–≥–∏, —Ç–µ–Ω—Ç—ã;\n"
    "‚úÖ **–†—ã–±–∞—Ü–∫–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏** ‚Äî –≤—Å—ë –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏;\n"
    "‚úÖ **–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ** ‚Äî —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏, –Ω–∞–±–æ—Ä—ã –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –Ω—É–∂–Ω—ã—Ö –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π!\n\n"
    "üìú **–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å <a href='/rules'>–ø—Ä–∞–≤–∏–ª–∞–º–∏</a> –∏ –≤–ª–∏–≤–∞–π—Å—è –≤ –Ω–∞—à–µ –¥—Ä—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!**\n\n"
    "üí¨ **–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞–π–¥—ë—à—å —á–µ–≥–æ-—Ç–æ, –≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–π, –ø–∏—à–∏ –∏–ª–∏ –∑–≤–æ–Ω–∏ ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º!**"
)

RULES_TEXT = (
    "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ \"–ü–∞–ª–∞—Ç–∫–∏-–î–í\"</b>\n\n"
    "üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
    "1. –ú–∞—Ç, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –∞–≥—Ä–µ—Å—Å–∏—è;\n"
    "2. –†–µ–∫–ª–∞–º–∞ –∏ —Å–ø–∞–º –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è;\n"
    "3. –§–ª—É–¥, –æ—Ñ—Ñ—Ç–æ–ø, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è;\n"
    "4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è;\n"
    "5. –†–∞–∑–∂–∏–≥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏;\n"
    "6. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π;\n"
    "7. –õ—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§.\n\n"
    "‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ:</b>\n"
    "1. –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, –ø–æ—Ö–æ–¥–æ–≤, –∫–µ–º–ø–∏–Ω–≥–∞;\n"
    "2. –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –ª–∞–π—Ñ—Ö–∞–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî <b>—Å–±—Ä–∞—Å—ã–≤–∞–π –∞–¥–º–∏–Ω—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>;\n"
    "3. –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∏–∑ –ø–æ—Ö–æ–¥–æ–≤ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π ‚Äî <b>—Å–±—Ä–∞—Å—ã–≤–∞–π –∞–¥–º–∏–Ω—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>;\n"
    "4. –î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º ‚Äî <b>—Å–±—Ä–∞—Å—ã–≤–∞–π –∞–¥–º–∏–Ω—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>.\n\n"
    "‚ùó <b>–í–∞–∂–Ω–æ:</b>\n"
    "- –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–µ–¥—ë—Ç –∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º, —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.\n\n"
    "<b>–°–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É! üåø</b>"
)

HELP_TEXT = (
    "üåü <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
    "‚Ä¢ /start ‚Äî –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞;\n"
    "‚Ä¢ /rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞;\n"
    "‚Ä¢ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥;\n"
    "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."
)

BAD_WORDS_PATTERN = re.compile(
    r"\b(–±–ª—è—Ç—å|—Å—É–∫–∞|–ø–∏–∑–¥–µ—Ü|—Ö—É–π|–µ–±–∞—Ç—å|–ø–∏–¥–æ—Ä|–º—É–¥–∞–∫|–¥–æ–ª–±–æ—ë–±|—Ö—É—ë–≤–æ|–ø–∏–∑–¥–∞|–∂–æ–ø–∞|–Ω–∞—Ö—É–π|–≥–æ–≤–Ω–æ|—à–ª—é—Ö–∞|—Ö—É–µ—Å–æ—Å|–¥–µ–±–∏–ª|–∏–¥–∏–æ—Ç|–∫–æ–∑—ë–ª|–ª–æ—Ö|–º—Ä–∞–∑—å|—Ç–≤–∞—Ä—å)\b",
    re.IGNORECASE
)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
async def init_db() -> None:
    async with aiosqlite.connect("violations.db", timeout=DB_TIMEOUT) as conn:
        await conn.execute('''CREATE TABLE IF NOT EXISTS violations 
                            (user_id INTEGER PRIMARY KEY, count INTEGER, last_violation TEXT)''')
        await conn.commit()

async def get_violations(user_id: int) -> Dict[str, any]:
    try:
        async with aiosqlite.connect("violations.db", timeout=DB_TIMEOUT) as conn:
            async with conn.execute("SELECT count, last_violation FROM violations WHERE user_id = ?", (user_id,)) as cursor:
                result = await cursor.fetchone()
                return {"count": result[0], "last_violation": datetime.fromisoformat(result[1]) if result[1] else None} if result else {"count": 0, "last_violation": None}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π: {e}")
        return {"count": 0, "last_violation": None}

async def update_violations(user_id: int, count: int, last_violation: datetime) -> None:
    try:
        async with aiosqlite.connect("violations.db", timeout=DB_TIMEOUT) as conn:
            await conn.execute("INSERT OR REPLACE INTO violations (user_id, count, last_violation) VALUES (?, ?, ?)",
                              (user_id, count, last_violation.isoformat()))
            await conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_current_time() -> datetime:
    return datetime.now(TIMEZONE)

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def is_night_time() -> bool:
    current_hour = get_current_time().hour
    return NIGHT_START <= current_hour < NIGHT_END

def rate_limit(command_name: str = "default"):
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            current_time = asyncio.get_event_loop().time()
            limit = RATE_LIMITS.get(command_name, RATE_LIMITS["default"])
            last_command = context.bot_data.get(f"last_command_{user_id}_{command_name}", 0)
            if current_time - last_command < limit:
                await update.message.reply_text("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏.")
                return
            context.bot_data[f"last_command_{user_id}_{command_name}"] = current_time
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator

async def notify_admins(context: ContextTypes.DEFAULT_TYPE, message: str) -> None:
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=message, parse_mode="HTML")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

def create_subscribe_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üëâ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –ö–ê–ù–ê–õ üëà", url=CHANNEL_URL)]
    ])

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ CPU
def track_cpu_time(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = time.process_time()
        result = await func(*args, **kwargs)
        end_time = time.process_time()
        cpu_time = end_time - start_time
        context = args[1] if len(args) > 1 else kwargs.get('context')
        if context:
            context.bot_data['cpu_used'] = context.bot_data.get('cpu_used', 0.0) + cpu_time
        return result
    return wrapper

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –ø–∏–Ω–≥
def is_bot_running():
    try:
        result = subprocess.run(
            ['pgrep', '-f', f'python3 {os.path.abspath(__file__)}'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        pids = result.stdout.strip().split()
        current_pid = str(os.getpid())
        return len(pids) > 1 or (len(pids) == 1 and pids[0] != current_pid)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return False

async def restart_self():
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        subprocess.Popen(['python3', os.path.abspath(__file__)], env=os.environ.copy())
        await asyncio.sleep(2)
        sys.exit(0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        await asyncio.sleep(RESTART_DELAY)
        await restart_self()

@retry(stop=stop_after_attempt(10), wait=wait_exponential(multiplier=1, min=2, max=60), retry=retry_if_exception(Exception))
@track_cpu_time
async def ping_uptime(context: ContextTypes.DEFAULT_TYPE):
    async with httpx.AsyncClient(timeout=httpx.Timeout(30.0, connect=15.0)) as client:
        try:
            response = await client.get(PING_URL)
            if response.status_code == 200:
                logger.info("–ü–∏–Ω–≥ –¥–æ Better Uptime —É—Å–ø–µ—à–µ–Ω")
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ Better Uptime: {response.status_code}")
                raise Exception("–ù–µ—É–¥–∞—á–Ω—ã–π –ø–∏–Ω–≥, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∏–Ω–≥: {e}")
            await restart_self()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@retry(stop=stop_after_attempt(10), wait=wait_exponential(multiplier=1, min=2, max=60), retry=retry_if_exception(lambda e: isinstance(e, (NetworkError, TimedOut, BadRequest))))
@track_cpu_time
async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id != GROUP_ID or not update.message.new_chat_members:
        return
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:
            continue
        name = member.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëâ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø", url=CHANNEL_URL)],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data="welcome_read")]
        ])
        try:
            group_msg = await context.bot.send_message(
                chat_id=GROUP_ID,
                text=WELCOME_TEXT.format(name=name),
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=keyboard
            )
            context.job_queue.run_once(
                lambda ctx: asyncio.create_task(ctx.bot.delete_message(chat_id=GROUP_ID, message_id=group_msg.message_id)),
                WELCOME_MESSAGE_TIMEOUT
            )
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {name} ({member.id}) –≤ –≥—Ä—É–ø–ø–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            await asyncio.sleep(5)

@track_cpu_time
async def welcome_read_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    try:
        await query.answer()
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

@retry(stop=stop_after_attempt(10), wait=wait_exponential(multiplier=1, min=2, max=60), retry=retry_if_exception(lambda e: isinstance(e, (NetworkError, TimedOut, BadRequest))))
@track_cpu_time
async def night_auto_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id != GROUP_ID or not update.message.text:
        return
    if not is_night_time():
        return
    if context.bot_data.get('cpu_used', 0.0) > CPU_LIMIT_SECONDS:
        logger.warning("–ü—Ä–æ–ø—É—Å–∫ –Ω–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è CPU")
        return
    now = get_current_time()
    user_name = update.message.from_user.first_name
    user_id = update.message.from_user.id
    text = update.message.text if len(update.message.text) <= 4096 else "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"
    response = (
        f"üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! üåü –≠—Ç–æ –Ω–æ—á–Ω–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ üåô‚ú®\n"
        f"üåô –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî <b>–ü–∞–ª–∞—Ç–∫–∏-–î–í</b> —É–∂–µ –æ—Ç–¥—ã—Ö–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–æ—á—å ({now.strftime('%H:%M')}). üõåüí§\n"
        "üåÑ –° –ø–µ—Ä–≤—ã–º–∏ —É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ª—É—á–∞–º–∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º! üåÖ‚ú®\n"
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üí´"
    )
    keyboard = create_subscribe_keyboard()
    try:
        sent_message = await update.message.reply_text(response, parse_mode="HTML", reply_markup=keyboard)
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=f"üîî –ù–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {text}",
            parse_mode="HTML"
        )
        next_deletion = now.replace(hour=11, minute=0, second=0, microsecond=0)
        if now >= next_deletion:
            next_deletion += timedelta(days=1)
        context.job_queue.run_once(
            lambda ctx: asyncio.create_task(ctx.bot.delete_message(chat_id=sent_message.chat_id, message_id=sent_message.message_id)),
            (next_deletion - now).total_seconds()
        )
        logger.info(f"–ù–æ—á–Ω–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")

@track_cpu_time
async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id != GROUP_ID or not update.message.text or is_admin(update.effective_user.id):
        return
    text = update.message.text
    if len(text) < MIN_MESSAGE_LENGTH:
        return
    if BAD_WORDS_PATTERN.search(text):
        user_id = update.effective_user.id
        now = get_current_time()
        violation_data = await get_violations(user_id)
        count = 0 if not violation_data["last_violation"] or (now - violation_data["last_violation"]) > timedelta(hours=VIOLATION_TIMEOUT_HOURS) else violation_data["count"]
        count += 1
        await update_violations(user_id, count, now)
        try:
            bot_rights = await context.bot.get_chat_member(chat_id=GROUP_ID, user_id=context.bot.id)
            if bot_rights.can_delete_messages:
                await update.message.delete()
            remaining_lives = MAX_VIOLATIONS - count
            keyboard = create_subscribe_keyboard()
            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {remaining_lives}",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            if count >= MAX_VIOLATIONS and bot_rights.can_restrict_members:
                await context.bot.ban_chat_member(GROUP_ID, user_id)
                await context.bot.send_message(GROUP_ID, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@rate_limit("rules")
@track_cpu_time
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = create_subscribe_keyboard()
    try:
        await update.message.reply_text(RULES_TEXT, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª: {e}")

@rate_limit("help")
@track_cpu_time
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = create_subscribe_keyboard()
    try:
        await update.message.reply_text(HELP_TEXT, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –ø–æ–º–æ—â–∏: {e}")

@rate_limit("stats")
@track_cpu_time
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        try:
            await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
        return
    try:
        async with aiosqlite.connect("violations.db", timeout=DB_TIMEOUT) as conn:
            async with conn.execute("SELECT user_id, count FROM violations") as cursor:
                violations = await cursor.fetchall()
        if not violations:
            await update.message.reply_text("üìä –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ—Ç.")
            return
        message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        for user_id, count in violations:
            message += f"ID {user_id}: {count} –Ω–∞—Ä—É—à–µ–Ω–∏–π\n"
        await update.message.reply_text(message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@rate_limit("start")
@track_cpu_time
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    activated_users = context.bot_data.setdefault('activated_users', set())
    if user_id in ADMIN_IDS or user_id in activated_users:
        try:
            await update.message.reply_text("‚úÖ –ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–∞—Å.")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
    context.user_data["attempts"] = 0
    try:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
        return ENTER_SECRET_CODE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {e}")
        return ConversationHandler.END

@track_cpu_time
async def enter_secret_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    if not user_input or len(user_input) > 50:
        try:
            await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return ENTER_SECRET_CODE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {e}")
            return ENTER_SECRET_CODE
    context.user_data["attempts"] = context.user_data.get("attempts", 0) + 1
    global_attempts = context.bot_data.setdefault('global_attempts', {})
    global_attempts[user_id] = global_attempts.get(user_id, 0) + 1
    try:
        if user_input == SECRET_CODE:
            context.bot_data['activated_users'].add(user_id)
            await context.bot.send_message(update.effective_chat.id, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            return ConversationHandler.END
        remaining_attempts = MAX_ATTEMPTS - global_attempts[user_id]
        if remaining_attempts > 0:
            await context.bot.send_message(update.effective_chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}.")
            return ENTER_SECRET_CODE
        await context.bot.send_message(update.effective_chat.id, "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞: {e}")
        return ConversationHandler.END

@track_cpu_time
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")
        return ConversationHandler.END

@retry(stop=stop_after_attempt(10), wait=wait_exponential(multiplier=1, min=2, max=60), retry=retry_if_exception(lambda e: isinstance(e, (NetworkError, TimedOut))))
@track_cpu_time
async def health_check(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await context.bot.get_me()
        logger.info("–ë–æ—Ç –∂–∏–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        await restart_self()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    await notify_admins(context, f"üö® –û—à–∏–±–∫–∞: {context.error}")
    if isinstance(context.error, (NetworkError, TimedOut, BadRequest, TelegramError)):
        logger.warning("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ Telegram, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        await restart_self()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
async def run_bot():
    global app
    request = HTTPXRequest(connect_timeout=120, read_timeout=120, pool_timeout=120, write_timeout=120)
    app = ApplicationBuilder().token(BOT_TOKEN).request(request).concurrent_updates(True).build()
    await init_db()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    app.add_handler(CommandHandler("rules", show_rules))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Chat(GROUP_ID), check_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Chat(GROUP_ID), night_auto_reply))
    app.add_handler(CallbackQueryHandler(welcome_read_button, pattern="^welcome_read$"))
    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={ENTER_SECRET_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_secret_code)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    ))
    app.add_error_handler(error_handler)
    app.job_queue.run_repeating(health_check, interval=21600)
    app.job_queue.run_repeating(ping_uptime, interval=PING_INTERVAL)

    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling(
            allowed_updates=Update.ALL_TYPES,
            timeout=30,
            drop_pending_updates=True,
            bootstrap_retries=5,
            error_callback=lambda e: logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
        )
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling!")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        await restart_self()

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    shutdown_event = asyncio.Event()

    def signal_handler(sig, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        shutdown_event.set()

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    await shutdown_event.wait()

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    try:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")

async def main():
    while True:
        try:
            await run_bot()
            break
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {RESTART_DELAY} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(RESTART_DELAY)
            await restart_self()

if __name__ == "__main__":
    asyncio.run(main())